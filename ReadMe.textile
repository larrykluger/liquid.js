h1. Liquid.js

h2. General

This is a complete port of "Liquid":http://www.liquidmarkup.org/ from Ruby to JavaScript. Any template that Ruby Liquid can compile and render, Liquid.js should too.

Liquid.js does not use <tt>eval</tt> or <tt>with</tt>, so it's pretty clean and really safe.

h2. Differences

# Ranges. JavaScript doesn't really have Ranges like Ruby does. So when Liquid.js comes across a range "(1..5)", it creates an Array with the values 1 through 5. NOTE: It uses Prototype's Range support, so (a..z) _should_ work.
# 'replace' and 'replace_first' filters build RegExps from the input, so you can actually define a regexp to use in your replacement.
# 'include' tag. By default, this will return a Liquid error (but not an exception). To use the 'include' tag, you'll need to implement your own 'filesystem' support. Which, in Liquid.js, just means you override the Liquid.readTemplateFile function to suit your own needs. Here's an example:

<pre><script>
  
  Liquid.readTemplateFile = function(path) {
    var elem = $(path);
    if(elem) {
      return elem.innerHTML;
    } else {
      return path +" can't be found."; 
      // Or throw and error, or whatever you want...
    }
  }
  
  var src = "{% include 'myOtherTemplate' with current_user %}";

  var tmpl = Liquid.parse( src );
  
  alert( tmpl.render({ current_user:'M@' }));
  
</script>
<!-- Browsers ignore script blocks with an unrecognized type.  -->
<!-- Makes for pretty good inline template storage.  -->
<script type="text/liquid" id="myOtherTemplate">
  Hello, {{ current_user }}!
</script></pre>

h2. Known Issues

# Known to work in Safari 3.1+ and FireFox 3+.
# IE 7: passes tests but needs more actual usage testing

h2. References:

* "http://wiki.shopify.com/UsingLiquid":http://wiki.shopify.com/UsingLiquid

h3. Todo

* Add Rhino support for console-based testing?

